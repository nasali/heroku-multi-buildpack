#!/usr/bin/env ruby

$stdout.sync = true

$:.unshift File.expand_path("../../lib", __FILE__)
require 'multipack'


log "Processing #{TRIGGER_FILE_NAME}..."

repos = IO.readlines(TRIGGER_FILE)

env_vars = ""
counter = 0

GIT_DIR_BACKUP = ENV['GIT_DIR']
ENV['GIT_DIR'] = nil #Yank out

repos.each do |git_repo|
  git_repo.strip!
  next if git_repo.empty?
  name = git_repo.split('/').last
  tag = nil
  
  if name.include?('#')
    repo_and_tag = git_repo.split('#')
    git_repo = repo_and_tag.first
    tag = repo_and_tag.last
    name = name.split('#').first
  end
  
  log "Cloning #{name}"
  dir = Dir.mktmpdir
  output = run_command "git clone #{git_repo} #{dir} >/dev/null 2>&1 "
  if $?.success?
    Dir.chdir dir
    
    if tag
      log "Checking out #{tag}"
      output = run_command "git fetch origin >/dev/null 2>&1 "
      raise "Error fetching! #{output}" unless $?.success?
      output = run_command "git checkout #{tag} >/dev/null 2>&1 "
      raise "Error checking out! #{output}" unless $?.success?
    end
    
    bin_dir = File.join(dir,'bin')
    detect = File.join(bin_dir,'detect')
    compile = File.join(bin_dir,'compile')
    release = File.join(bin_dir,'release')
    
    fix_executable_permissions(detect,compile,release)
    
    log "Detecting..."    
    detect_output = run_command "#{detect} #{WORK_DIR}"
    if $?.success?
      log "Compiling..."
      compile_output = run_command "#{compile} #{WORK_DIR} #{CACHE_DIR} "
      
      if $?.success?
        log "Compiled successfully. Invoking release..."
        
        release_output = run_command "#{release} #{WORK_DIR} #{CACHE_DIR} "
        
        if $?.success?
          latest_vars = parse_release_vars(release_output)
          log "Collected release output"
          
          unless latest_vars["config_vars"].nil?
            latest_vars["config_vars"].each do |key, value|
              if ENV[key] != value
                log "Setting ENV[#{key.inspect}] to #{value.inspect}"
                ENV[key] = value
                save_env_config_var(key,value)
              end
            end
          end
          
          counter = counter + 1
        else
          log "Error releasing!"
        end
      else
        log "Error compiling #{compile_output}"
      end
    end
  else
    log "Failed to clone #{git_repo}!"
  end
  
  exit 1 unless $?.success?
end

log "Putting releases together..."
save_release_file()
if counter > 1
  puts "=====> Done compiling all #{counter} buildpacks!"
else
  puts "=====> Done compiling buildpack!"
end

ENV['GIT_DIR'] = GIT_DIR_BACKUP #Restore